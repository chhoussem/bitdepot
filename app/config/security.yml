security:
    encoders:
        FOS\UserBundle\Model\UserInterface: sha512

    providers:
        # Only for JWT-Auth
        fos_userbundle:
            id: fos_user.user_provider.username

        # Only for WSSE-Auth
        in_memory:
            memory:
                users:
                    application_1: { password: '04e7bc77ce0aeee6834f0400f0140f04c0474b383ffe43c9e37ee02c303cbfc94da95c6e7d59b6853c70b9b02600415391fbf771cad6a350c866c0f17b4479b0', roles: 'ROLE_WSSE' }

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        login:
            pattern:  ^/login
            stateless: true
            anonymous: true
            form_login:
                provider: fos_userbundle
                check_path:               /login_check
                success_handler:          lexik_jwt_authentication.handler.authentication_success
                failure_handler:          lexik_jwt_authentication.handler.authentication_failure
                require_previous_session: false

        api:
            pattern:   ^/
            stateless: true

            # JWT-Auth, for users only
            lexik_jwt: ~

            # WSSE-Auth, for application only
            wsse:
                provider: in_memory
                realm: "Secured with WSSE" #identifies the set of resources to which the authentication information will apply (WWW-Authenticate)
                profile: "UsernameToken" #WSSE profile (WWW-Authenticate)

    access_control:
        - { path: ^/login,  roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/,       roles: IS_AUTHENTICATED_FULLY }